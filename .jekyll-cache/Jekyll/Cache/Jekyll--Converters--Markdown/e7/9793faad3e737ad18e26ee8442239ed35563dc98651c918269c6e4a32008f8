I"Ê<p>Probably my favorite aspect of computer science is all the hardware you get to write
programs for.  I love the idea of writing small programs that can get a lot done by 
considering all the little details of a programming language.  I also like the idea
of building something that can really take advantage of the beefiest hardware out there 
(though I don‚Äôt have much experience with that side of things).</p>

<p>When I took my first programming class, I remember specifically learning about memory management
in C++.  I thought, ‚ÄúWhy would I ever need to even think about memory when my computer has 16gb of
it?‚Äù  Well, not thinking about memory management is how you end up writing bad and inefficient 
programs, and what‚Äôs the fun in doing that?</p>

<p>What is this all building up to?  It‚Äôs mostly to say that I really like working with lower
level langauges and getting down into the how-and-why of programs.  This is what really 
attracted me to C originally and why I love to use it despite the fact that it‚Äôs orders of
magnitude more difficult than something like Python.</p>

<p>Born from this interest in the lower levels of programming (and my degree in linguistics) is
the natural interest in compilers, interpreters, and evaluators.  There‚Äôs something so interesting
about using our big brains to make a dumb computer box do math, analyze language, or write other
computer programs for us.  It‚Äôs also pretty crazy learning about the kind of complexity that goes 
into making even the most basic calculator.</p>

<p>At the heart of this all, how is it that we can make a computer understand something as simple as
2 + 2 = 4? What goes into that process and how does it all work?  I‚Äôm by no means an expert at this
but I‚Äôve been working on a fun little evaluator and I‚Äôve learned a lot, so why not share it?</p>

<p>This first post will be a high level overview of the whole process; how it works and what has to be 
done to get a working program.  The next post will cover my implementation of it in C and the usual
dev diary type things.  A 3rd and final post will be my attempt at porting this over into other languages
(maybe something like python, Rust, or Java).</p>

<p>Enjoy!</p>

<h1 id="translating-to-postfix">Translating to Postfix</h1>

<p>There are two major steps that allow a computer to evaluate an expression.  The first is to translate
the incoming infix expression into a more computer-readable postfix expression.
Postfix notation (or reverse polish notation) places the operators after the operands.  An infix expression
like ‚Äú1*2+3‚Äù becomes ‚Äú12*3+‚Äù in postfix.  This greatly simplifies the evaluation process and makes it worth
the trouble.  You‚Äôll see how that works in the next section.  Postfix also removes the need to have parenthesis,
since postfix alone keeps track of the order of operations.</p>

<p>For now, we‚Äôll go over the process of converting an infix expression to a postfix expression.  The algorithm 
used for this is called the ‚ÄúShunting yard‚Äù algorithm, named after the way a train shunting yard operates
It was created by the famous Edsgar Dijkstra.  The core of this algorithm, and the entire expression evaluation 
process, is a stack.  We can push and pop different operators and operands to the stack to place them in just 
the right order. Here is a very general overview of how the algorithm works:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Start at the first token of an expression
2. -&gt; If that token is an operand, add it to the output queue
   -&gt; If that token is an operator, push it to the stack
   -&gt; If that token is a left paren, push it to te stack
   -&gt; If that token is a right paren, dump the stack up to the left paren
3. After all tokens have been read, dump the stack to the output
4. Return the new postfix expression
</code></pre></div></div>

<p>One very important thing to mention: Whatever you do with the operators must take operator precedence into account. 
Operator precedence tells the program that */ should be evaluated before +-, essentially PEMDAS (or whatever you might
have learned).  Without this, the postfix translator will not work properly.  I‚Äôll explain how to implement this in 
when I go over the actual C code for this project.</p>

<p>Here is that algorithm applied to a simple expression, ‚Äú(1+2)*3-4‚Äù</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. TOKEN: '('
Left paren, push to stack
2. TOKEN: '1'
Operand, add to output
3. TOKEN: '+'
Operator, push to stack
4. TOKEN: '2'
Operand, add to output
5. TOKEN: ')'
Right paren, dump stack up to '(' to output
</code></pre></div></div>

<p>At this point, the stack is empty and our output looks like ‚Äú12+‚Äù</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6. TOKEN: '*'
Operator, push to stack
7. TOKEN: '3'
Operand, add to output
8. TOKEN: '-'
Operand, current operator at top of stack 
has higher precedence.
- pop stack and add to output
- push '-' to operator stack
9. TOKEN: 4
Operator, add to output
---
All tokens parsed, dump operator stack to output
</code></pre></div></div>

<p>The final result of this would be ‚Äú12+3*4-‚Äú</p>

<h1 id="evaluating-the-expression">Evaluating the Expression</h1>

<p>Once the expression has been translated into postfix notation, the evaluation process is extremely straightforward by 
comparison.  The evaluation step
is made so straightforward because of all the work we did in the first step.  This should make it clear why we had to go 
through the process of converting
the infix expression into postfix.</p>

<p>We can evaluate a given postfix expression using this algorithm:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Read in a token from the expression 

2. -&gt; If that token is a number, push it onto the stack
   |
   -&gt; If that token is an operator, pop the required number 
      of tokens from the stack and evaluate, then push the 
      result back onto the stack.

3. Pop the final element from the array and return it
</code></pre></div></div>

<p>This algorithm shows why postfix notation is so important.  Because each operator follows its operands, we can easily
push the operands onto a stack until we hit their operator.  We then just pop off enough operands from the stack and
plug those into some function that corresponds to the operator.  Here‚Äôs an example of it at work on an actual
expression, lets say ‚Äú123*+‚Äù:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. TOKEN: 1
- Push to operand stack
2. TOKEN: 2
- Push to operand stack
3. TOKEN: 3
- Push to operand stack
4. TOKEN: *
- Pop 3 and 2, solve for 3 * 2 and 
  push 6 onto the operand stack
5. TOKEN: +
- Pop 6 and 1, solve for 6 + 1 and
  push 7 back onto the stack
6. END OF EXPRESSION
- Pop 7 from the stack and return it.
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>This was a somewhat in-depth overview of everything you need to know before writing an expression evaluator. 
The next part will cover the implementation in C and will most likely review these points as they come up in
the code.</p>

:ET